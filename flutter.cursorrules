### 代码风格和结构
- 编写简洁高效的源代码。
- 使源代码易于阅读和维护，并提供准确的示例。
- 避免代码重复：将小部件和功能模块化为可重用的组件。
- 使用描述性变量名称：使用带有辅助动词的名称，例如 isLoading、hasError。

### /lib下的目录结构
- /lib/models/：数据模型和类型定义（Model）
- /lib/viewmodels/：状态管理和业务逻辑（ViewModel）
- /lib/views/widgets/：可重用小部件（视图）
- /lib/views/screens/：每个屏幕的小部件（视图）
- /lib/services/：用于 API 调用和数据访问的服务类
- /lib/utils/：辅助函数和常量

### 命名约定
- 目录和文件：使用蛇形命名法（例如 auth_wizard.dart）。
- 变量和函数名称：使用驼峰式命名（例如 lowerCamelCase）。
- 类名和类型名：使用 Pascal 大小写（例如 UpperCamelCase）。
- 小部件：使用 Pascal 大小写并匹配文件名（例如 AuthWizard 小部件应位于 auth_wizard.dart 中）。

＃＃＃ 进口
- 首先放置以 dart: 开头的导入（使用 lowercase_with_underscores 作为导入前缀）。
- 接下来，导入第三方包（package:）。
- 最后导入项目内的相对路径和文件。

### ​使用 Dart
- 利用类型安全：在所有代码中使用静态类型，并尽可能利用类型推断。

### 用户界面和样式
- 使用材质小部件。
- 统一主题：使用 ThemeData 应用一致的样式

### 性能优化
- 如果不需要状态，优先使用StatelessWidget。
- 利用 const 构造函数：如果您的小部件是不可变的，请使用 const 来优化您的构建。

### 状态管理
- 使用 Riverpod 实施高效的状态管理。
- 管理 ViewModel 中的状态并将其与视图协调。

### 软件架构
使用MVVM（模型视图ViewModel）。

### 主要规则
- 避免行长超过 80 个字符，以提高代码可读性。
- 对所有流控制结构（if、for、while 等）使用大括号 {}。
- 积极使用注释来帮助理解和维护您的代码。
- 使用单引号，避免双引号，并使用一致的字符串文字以提高可读性。
